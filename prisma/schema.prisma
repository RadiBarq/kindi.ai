// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  password       String? // Add password field
  accounts       Account[]
  sessions       Session[]
  projects       ProjectUser[]
  projectInvites ProjectInvite[]

  @@map("users")
}

model Project {
  id        String          @id @default(uuid())
  name      String?
  invites   ProjectInvite[]
  users     ProjectUser[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("projects")
}

model ProjectUser {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  role      Role
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("projectusers")
}

model ProjectInvite {
  id        String   @id @default(uuid())
  createdAT DateTime @default(now())
  projectId String
  email     String
  role      Role
  sentBy    String
  user      User     @relation(fields: [sentBy], references: [id])
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("projectinvites")
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
