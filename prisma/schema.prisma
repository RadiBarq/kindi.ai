generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String              @id @default(uuid())
  createdAt     DateTime            @default(now())
  name          String?
  email         String?             @unique
  emailVerified DateTime?           @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  invites       ProjectUserInvite[]
  projects      ProjectUser[]
  sessions      Session[]

  @@map("users")
}

model Project {
  id        String              @id @default(uuid())
  name      String?             
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @default(now()) @updatedAt @map("updated_at")
  invites   ProjectUserInvite[]
  users     ProjectUser[]

  @@map("projects")
}

model ProjectUser {
  id        String      @id @default(uuid())
  userId    String      @map("user_id")
  projectId String      @map("project_id")
  role      ProjectRole
  createdAt DateTime    @default(now()) @map("created_at")
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("project_users")
}

model ProjectUserInvite {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now()) @map("created_at")
  projectId    String      @map("project_id")
  email        String      @unique
  role         ProjectRole
  sentByUserId String?     @map("sent_by_user_id")
  project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sentByUser   User?       @relation(fields: [sentByUserId], references: [id], onDelete: SetNull)

  @@map("project_user_invites")
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}
